load("C:/Users/cnewt/Yang/new Figs/Renv3.RData")
library(plotly)
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC4, color = ~CDB_ratio, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
summary(Rpca_mod)
library(FactoMineR)
library(factoextra)
fviz_pca_var(Rpca_mod, axes = c(1,2))
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC4, color = ~CDB_ratio, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
fviz_pca_var(Rpca_mod, axes = c(1,4))
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC4, color = ~CDB_ratio, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
library(rgl)
coords <- NULL
for (i in 1:nrow(Rpca_mod$rotation)) {coords <- rbind(coords, rbind(c(0,0,0),Rpca_mod$rotation[i,1:3]))}
lines3d(coords, col = 'red', lwd = 4)
text3d((Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'red'))
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'red')
text3d(Rpca_mod$rotation[,1:3], texts = colnames(R_mod))
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'red')
for (i in 1:nrow(Rpca_mod$rotation)) {coords <- rbind(coords, rbind(c(0,0,0),Rpca_mod$rotation[i,1:3]))}
lines3d(coords, col = 'red', lwd = 4)
plot3d(Rpca_mod$x[,1:3], col = R_mod$Texture)
plot3d(Rpca_mod$x[,1:3], col = R_mod$CDB_ratio)
for (i in 1:nrow(Rpca_mod$rotation)) {coords <- rbind(coords, rbind(c(0,0,0),Rpca_mod$rotation[i,1:3]))}
lines3d(coords, col = 'red', lwd = 4)
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
plot3d(Rpca_mod$x[,1:3])
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
lines3d(coords, col = 'red', lwd = 4)
lines3d(coords, col = 'red', lwd = 8)
lines3d(coords, col = 'red', lwd = 2)
lines3d(coords, col = 'red', lwd = 2)
plot3d(Rpca_mod$x[,1:3])
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
plot3d(Rpca_mod$x[,1:14])
plot3d(Rpca_mod$x[,1:4])
plot3d(Rpca_mod$x[,1:5])
plot3d(Rpca_mod$x[,1:13])
text3d(Rpca_mod$rotation[,1:13], texts = rownames(Rpca_mod$rotation), col = 'black')
Rpca_mod$rotation[,1:3]
plot3d(Rpca_mod$x[,1:3])
plot3d(Rpca_mod$rotation[,1:3])
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
lines3d(coords, col = 'red', lwd = 2)
fviz_pca_var(Rpca_mod, axes = c(1,2))
rgl.material(front = 'lines')
plot3d(Rpca_mod$rotation[,1:3]) + rgl.material(front = lines)
plot3d(Rpca_mod$rotation[,1:3]) + rgl.material(front = 'lines')
plot3d(Rpca_mod$rotation[,1:3], rgl.material(front = lines))
plot3d(Rpca_mod$rotation[,1:3], rgl.material(front = 'lines'))
plot3d(Rpca_mod$rotation[,1:3])
plot3d(Rpca_mod$rotation[,1:3], material3d(front = lines))
plot3d(Rpca_mod$rotation[,1:3], material3d(front = 'lines'))
plot3d(Rpca_mod$rotation[,1:3], material(front = 'lines'))
plot3d(Rpca_mod$rotation[,1:3])
text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
lines3d(coords, col = 'red', lwd = 2
)
Rpca_mod_PC123_contrib <- plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
library(htmlwidgets)
saveWidget(Rpca_mod_PC123_contrib, file = 'RPC123_contrib.html')
Rpca_mod_PC123_contrib
Rpca_mod_PC123_contrib <- ggplotly(plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2))
saveWidget(Rpca_mod_PC123_contrib, file = 'RPC123_contrib.html')
saveWidget(plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2), file = 'RPC123_contrib.html')
htmltools::save_html(plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2), file = 'RPC123_contrib.html')
Rpca_mod_PC123_contrib <- plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
htmltools::save_html(Rpca_mod_PC123_contrib, file = 'RPC123_contrib.html')
r1 <- plot3d(Rpca_mod$rotation[,1:3])
r2 <- plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
r3 <- lines3d(coords, col = 'red', lwd = 2)
widgets <- rglwidget() %>% toggleWidget(ids = r1) %>% toggleWidget(ids = r2) %>% toggleWidget(ids = r3)
install.packages('manipulateWidget')
library(ggplot2)
library(plotly)
library(caret)
install.packages('ggplotify')
library(ggplotify)
b <- as.ggplot(plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2))
saveWidget(plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2), file = 'RPC123_contrib.html')
r1 <- plot3d(Rpca_mod$rotation[,1:3])
r2 <- text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black')
r3 <- lines3d(coords, col = 'red', lwd = 2)
install.packages('shiny')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
install.packages('shiny')
install.packages("shiny")
install.packages('manipulateWidgets')
htmltools::save_html(r1, r2, r3, 'RPC123_contrib.html')
htmltools::save_html(list(r1, r2, r3), 'RPC123_contrib.html')
library(factoextra)
Rpca_mod_PC12 <- fviz_pca_var(Rpca_mod, axes = c(1,2))
print(Rpca_mod_PC12)
Rpca_mod_PC13 <- fviz_pca_var(Rpca_mod, axes = c(1,3))
print(Rpca_mod_PC13)
Rpca_mod_PC23 <- fviz_pca_var(Rpca_mod, axes = c(2,3))
print(Rpca_mod_PC23)
3D_RPC123_contrib <- plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
RPC123_contrib <- plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
library(rgl)
RPC123_contrib <- plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
View(RPC123_contrib)
RPC123_contrib
RPC1 <- fviz_contrib(Rpca_mod, choice = 'var', axes = 1, fill = 'black', color = 'black')
print(RPC1)
RPC2 <- fviz_contrib(Rpca_mod, choice = 'var', axes = 2, fill = 'black', color = 'black')
print(RPC2)
RPC1 <- fviz_contrib(Rpca_mod, choice = 'var', axes = 1, fill = 'black', color = 'black') + labs(title = 'Contribution of Variables to PC1')
print(RPC1)
RPC2 <- fviz_contrib(Rpca_mod, choice = 'var', axes = 2, fill = 'black', color = 'black') + labs(title = 'Contribution of Variables to PC2')
print(RPC2)
RPC3 <- fviz_contrib(Rpca_mod, choice = 'var', axes = 3, fill = 'black', color = 'black') + labs(title = 'Contribution of Variables to PC3')
print(RPC3)
Rpca_mod$sdev
Rpca_mod$rotation
Rpca_mod$rotation
library(plotly)
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~CDB_ratio, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Zn, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
RPC4 <- fviz_contrib(Rpca_mod, choice = 'var', axes = 4, fill = 'black', color = 'black')
print(RPC4)
Library(rgl)
plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
savehistory("C:/Users/cnewt/Yang/new Figs/Renv4.Rhistory")
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Zn, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
Zn_pca <- plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Zn, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
library(htmlwidgets)
saveWidget(Zn_pca, file = 'Znpca.html')
setwd("C:/Users/cnewt")
Mn_pca <- plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Mn, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
saveWidget(Mn_pca, file = 'Mnpca.html')
Silt_pca <- plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Silt, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
saveWidget(Silt_pca, file = 'Siltpca.html')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black') + labs(title = 'PC contribution')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black') + labs(title = 'PC Contribution')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black', ylim = 13) + labs(title = 'PC Contribution')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black', ylim = 12) + labs(title = 'PC Contribution')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black', ylim = 10) + labs(title = 'PC Contribution')
fviz_screeplot(Rpca_mod, fill = 'black', color = 'black') + labs(title = 'PC Contribution')
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Zn, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Mn, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
plot_ly(Rpca_modf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~Silt, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
Library(rgl)
plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
R_mod2 <- R_all[-c(25:30,41), ]
View(R_mod2)
R_mod2_pca <- prcomp(R_mod2[,c(2:14)], center = TRUE, scale. = TRUE)
fviz_screeplot(R_mod2_pca)
library(ggfortify)
R_mod2_pcaf <- fortify(R_mod2_pca)
plot_ly(R_mod2_pcaf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~CDB_ratio, symbol = R_mod$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
plot_ly(R_mod2_pcaf, x = ~PC1, y = ~PC2, z = ~PC3, color = ~CDB_ratio, symbol = R_mod2$Texture, symbols = c('square', 'circle', 'cross'), colors = c('red', 'green'))
fviz_contrib(R_mod2_pca, choice = 'var', axes = 1)
fviz_contrib(R_mod2_pca, choice = 'var', axes = 2)
fviz_contrib(R_mod2_pca, choice = 'var', axes = 3)
save.image("C:/Users/cnewt/Yang/new Figs/Renv5.RData")
load("C:/Users/cnewt/Yang/new Figs/Renv5.RData")
Library(rgl)
plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
library(plot3D)
Library(rgl)
plot3d(Rpca_mod$rotation[,1:3]) + text3d(Rpca_mod$rotation[,1:3], texts = rownames(Rpca_mod$rotation), col = 'black') + lines3d(coords, col = 'red', lwd = 2)
version
install.packages('tidyselect')
library(treeio)
library(ggtree)
install.packages(ggtree)
install.packages('ggtree')
library(ggtree)
remotes::install_github("YuLab-SMU/ggtree")
library(ggtree)
library(ggtree)
BiocManager::install("ggtree")
BiocManager::install("ggtree", force = TRUE)
library(ggtree)
install.packages('ggtree')
remove.packages('ggtree')
install.packages('ggtree')
install.packages('ape')
install.packages("ape")
library(ape)
library(phytools)
library(phytool)
install.packages('phytools')
install.packages('phytools')
install.packages('phangorn')
install.packages('virdis')
library(virdis)
install.packages('viridis')
library(viridis)
citation('GGally')
citation('vegan')
citation('emmeans')
citation('stats')
.libPaths('C:\Users\cnewt\R')
.libPaths('C:/Users/cnewt/R')
install.packages('car')
install.packages("car")
install.packages("car")
install.packages("car")
update.packages()
source('table2itol.R')
source("table2itol.R")
setwd("C:/Users/cnewt")
source("table2itol.R")
install.packages('optparse')
install.packages('plotrix')
install.packages('readxl')
install.packages('readODS')
install.packages('yaml')
install.packages('BiocManager')
library(BiocManager)
BiocManager::install('ggtree')
browseVignettes('ggtree')
install.packages('DESeq2')
install.packages('DESeq2')
install.packages('DESeq2')
BiocManager::install('DESeq2')
install.packages('BiocManager')
BiocManager::install('DESeq2')
library(DESeq2)
#This script uses the conda environment "heatmap"
library(edgeR)
update.packages()
update.packages(checkBuilt = TRUE, ask = FALSE)
.libPaths()
#This script uses the conda environment "heatmap"
library(edgeR)
.libPaths()
.libPaths('C:/Program Files/R/R-4.3.2/library')
.libPaths()
#This script uses the conda environment "heatmap"
library(edgeR)
library(edgeR)
.libPaths()
find.package("edgeR")
setwd("C:/Users/cnewt/github/Dawei_RNA")
install.packages('funchir')
funchir::stale_package_check('Analysis4.R')
package_version('edgeR')
packageVersion('edgeR')
packageVersion('limma')
install.packages('GenomicFeatures')
install.packages("GenomicFeatures")
library(GenomicFeatures)
#This script uses the conda environment "heatmap"
library(edgeR)
library(RColorBrewer)
library(pheatmap)
library(tibble)
library(tidyverse)
library(dplyr)
library(ggvenn)
library(DESeq2)
library(tximport)
library(readr)
library(rhdf5)
library(ensembldb)
library(plyr)
library(ballgown)
library(txdbmaker)
library(purrr)
